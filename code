#include <iostream>
#include <ctime>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        int min_idx = i;
        for (int j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        swap(arr[min_idx], arr[i]);
    }
}

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[100], R[100];

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1)
        arr[k++] = L[i++];

    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

void measureSorts(int arr[], int n) {
    int temp[100];

    clock_t start, end;

    for (int algo = 0; algo < 4; algo++) {
        for (int i = 0; i < n; i++)
            temp[i] = arr[i];

        start = clock();
        if (algo == 0) bubbleSort(temp, n);
        else if (algo == 1) selectionSort(temp, n);
        else if (algo == 2) insertionSort(temp, n);
        else if (algo == 3) mergeSort(temp, 0, n-1);
        end = clock();

        double time_taken = double(end - start) / CLOCKS_PER_SEC * 1000;
        if (algo == 0) cout << "Bubble Sort Time: " << time_taken << " ms\n";
        if (algo == 1) cout << "Selection Sort Time: " << time_taken << " ms\n";
        if (algo == 2) cout << "Insertion Sort Time: " << time_taken << " ms\n";
        if (algo == 3) cout << "Merge Sort Time: " << time_taken << " ms\n";
    }
}

int main() {
    int Arr1[] = {1,2,3,4,5};
    int Arr2[] = {1,2,3,4,5,6,7,8,9,10};
    int Arr3[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                  21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,
                  38,39,40,41,42,43,44,45,46,47,48,49,50};
    int Arr4[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
                  21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
                  41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
                  61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
                  81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100};

    cout << "Array with 5 elements:\n";
    measureSorts(Arr1, 5);

    cout << "\nArray with 10 elements:\n";
    measureSorts(Arr2, 10);

    cout << "\nArray with 50 elements:\n";
    measureSorts(Arr3, 50);

    cout << "\nArray with 100 elements:\n";
    measureSorts(Arr4, 100);

    return 0;
}
